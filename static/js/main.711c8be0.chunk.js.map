{"version":3,"sources":["Die.js","RollDice.js","App.js","serviceWorker.js","index.js"],"names":["Die","className","this","props","face","isRolling","style","color","Component","RollDice","state","die1","die2","roll","bind","setState","sides","Math","floor","random","length","setTimeout","onClick","disabled","defaultProps","App","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yVAmBeA,G,6KAdX,OACE,6BACE,uBACEC,UAAS,0BAAqBC,KAAKC,MAAMC,KAAhC,kBACPF,KAAKC,MAAME,UAAY,UAAY,IAErCC,MAAO,CAAEC,MAAO,e,GARRC,cCCZC,G,wDAIJ,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CACXC,KAAM,MACNC,KAAM,MACNP,WAAW,GAEb,EAAKQ,KAAO,EAAKA,KAAKC,KAAV,gBAPK,E,mDASX,IAAD,OACLZ,KAAKa,SAAS,CACZJ,KAAMT,KAAKC,MAAMa,MACfC,KAAKC,MAAMD,KAAKE,SAAWjB,KAAKC,MAAMa,MAAMI,SAE9CR,KAAMV,KAAKC,MAAMa,MACfC,KAAKC,MAAMD,KAAKE,SAAWjB,KAAKC,MAAMa,MAAMI,SAE9Cf,WAAW,IAEbgB,YAAW,WACT,EAAKN,SAAS,CAAEV,WAAW,MAC1B,O,+BAGH,OACE,yBAAKJ,UAAU,aACb,kBAAC,EAAD,CAAKG,KAAMF,KAAKQ,MAAMC,KAAMN,UAAWH,KAAKQ,MAAML,YAClD,kBAAC,EAAD,CAAKD,KAAMF,KAAKQ,MAAME,KAAMP,UAAWH,KAAKQ,MAAML,YAClD,4BAAQiB,QAASpB,KAAKW,KAAMU,SAAUrB,KAAKQ,MAAML,WAC9CH,KAAKQ,MAAML,UAAY,UAAY,mB,GAjCvBG,cAAjBC,EACGe,aAAe,CACpBR,MAAO,CAAC,MAAO,MAAO,QAAS,OAAQ,OAAQ,QAsCpCP,QC/BAgB,MARf,WACE,OACE,yBAAKC,MAAM,OACT,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.711c8be0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Die.css\";\r\n\r\nclass Die extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <i\r\n          className={`Die fas fa-dice-${this.props.face} fa-6x ${\r\n            this.props.isRolling ? \"shaking\" : \"\"\r\n           }`}\r\n          style={{ color: \"blue\" }}\r\n        ></i>\r\n        {/* <i class=\"fa fa-car\"></i> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Die;\r\n","import React, { Component } from \"react\";\r\nimport Die from \"./Die\";\r\nimport \"./RollDice.css\";\r\n\r\nclass RollDice extends Component {\r\n  static defaultProps = {\r\n    sides: [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"],\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      die1: \"one\",\r\n      die2: \"one\",\r\n      isRolling: false,\r\n    };\r\n    this.roll = this.roll.bind(this);\r\n  }\r\n  roll() {\r\n    this.setState({\r\n      die1: this.props.sides[\r\n        Math.floor(Math.random() * this.props.sides.length)\r\n      ],\r\n      die2: this.props.sides[\r\n        Math.floor(Math.random() * this.props.sides.length)\r\n      ],\r\n      isRolling: true,\r\n    });\r\n    setTimeout(() => {\r\n      this.setState({ isRolling: false });\r\n    }, 1000);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"RollDice \">\r\n        <Die face={this.state.die1} isRolling={this.state.isRolling}></Die>\r\n        <Die face={this.state.die2} isRolling={this.state.isRolling}></Die>\r\n        <button onClick={this.roll} disabled={this.state.isRolling}>\r\n          {this.state.isRolling ? \"Rolling\" : \"Roll Dice!\"}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RollDice;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport RollDice from \"./RollDice\";\n// import Die from \"./Die\";\n\nfunction App() {\n  return (\n    <div class=\"App\">\n      <RollDice />\n    </div> \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}